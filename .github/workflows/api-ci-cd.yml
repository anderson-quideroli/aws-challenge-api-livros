#Workflow para CI/CD da API-LIVROS

name: API-LIVROS-CI-CD

on:
  push:
    branches:
      - main
      - develop
                                                     
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
     - uses: actions/checkout@v3
     
     - name: Set up Python
       uses: actions/setup-python@v4
       with:
         python-version: '3.11'
         
     - name: Install Dependencies
       run: | 
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
      
     - name: Test lint witf ruff
       run: |
         pip install ruff
         ruff --format=github --target-version=py37 .
    
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_encrypted: ${{ steps.build-image.outputs.image_encrypted }}

    steps:
     - uses: actions/checkout@v3
     
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ vars.AWS_REGION }}

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1  
         
     - name: Build, tag, and push image to Amazon ECR
       id: build-image
       env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         JOB_ID: ${{ github.run_number }}
         IMAGE_TAG: ${{ github.sha }}
         SECRET: ${{ secrets.PGP_SECRET_SIGNING_PASSPHRASE }} 
       run: |
          docker build -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$JOB_ID
          docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$JOB_ID
          image="$ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG"
          echo "::add-mask::$image"
          image_encrypted=$(gpg --symmetric --batch --passphrase "$SECRET" --output - <(echo "$image") | base64 -w0)
          echo "image_encrypted=$image_encrypted" >> $GITHUB_OUTPUT         

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition api-task --query taskDefinition > task-definition.json    

      - name: Get image
        id: get_image
        shell: bash
        run: |
          image_deployment=$(gpg --decrypt --quiet --batch --passphrase "$SECRET" --output - <(echo "${{ needs.build.outputs.image_encrypted }}" | base64 --decode))
          echo "::add-mask::$image_deployment"
          echo "image_deployment=$image_deployment" >> $GITHUB_OUTPUT
        env:
            SECRET: ${{ secrets.PGP_SECRET_SIGNING_PASSPHRASE }}        

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.get_image.outputs.image_deployment }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true